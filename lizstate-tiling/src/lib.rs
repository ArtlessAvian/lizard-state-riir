//! 2D spaces (plural!) formed by joining square tiles.
//!
//! # Usage
//! All Copy + Eq traits are intended to be implemented on references or unit types.
//! All Clone + Eq traits are intended to be implemented on references, unit types, or smart pointers.
//!
//! # Contributing
//! Careful about making marker traits `Default.` Reference types cannot be `Default.`

#![allow(dead_code)]
#![warn(clippy::pedantic)]
#![no_std]
#[cfg(feature = "std")]
extern crate std;

// *************** Core ***************

/// The four cardinal directions!
pub mod direction;

/// A pair of integers!
pub mod coords;

/// Sequences of directions.
pub mod walk;

/// Traits for 4-regular undirected graphs and their vertices.
///
/// Outgoing directed edges are named.
pub mod tiling_graph;

// *************** Example Graphs ***************

/// The familiar 2D coordinates.
pub mod euclidean_plane;

/// A big ass graph.
pub mod free_group;

// *************** Customizable Graphs ***************

// *****************************************************
// ************** OLD STUFF, WAY TOO DANK **************
// *****************************************************

// *************** The reason why this crate exists ***************

// /// A space defined by the user, following specific rules.
// #[cfg(feature = "std")]
// pub mod custom_space;

// /// Replaces every tile of a space with many tiles.
// pub mod expansion;

// // *************** How do we get there? ***************

// /// The four cardinal directions!
// pub mod direction;

// // A pair of integers!
// pub mod coords;

// /// Sequences of directions.
// ///
// /// A trait for behavior, and implementors with finite storage.
// pub mod path;

// /// A trait for 4-regular undirected graphs. Implementations are "spaces."
// ///
// /// Every *directed* edge is labeled, and their reverse edges are labeled their inverse label.
// pub mod tiling;

// /// A path in a space, with a **fixed** beginning.
// ///
// /// Appending new paths is legal. Prepending is not!
// pub mod path_from_origin;

// /// The familiar 2D coordinates, implementing `HasSquareTiling`.
// pub mod euclidean_plane;

// /// The least restricted space. Two efficient paths lead to the same tile IFF they are the same path.
// pub mod free_group;

// /// Runtime defined equality classes on paths.
// ///
// /// Appending equal paths preserves equality.
// /// Prepending equal paths does NOT preserve equality! (Not a group!)
// pub mod path_equality;

// /// A trait for Groups generated by `Up` and `Right`.
// ///
// /// Can be seen as edge supergraphs of the 4-regular undirected graph.
// pub mod group;
